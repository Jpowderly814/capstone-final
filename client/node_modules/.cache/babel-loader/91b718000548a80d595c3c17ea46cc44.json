{"ast":null,"code":"/*import { useState, useEffect } from \"react\"\nimport useAuth from \"./useAuth\"\nimport Player from \"./Player\"\n//import TrackSearchResult from \"./TrackSearchResult\"\nimport PlaylistSearchResult from \"./PlaylistSearchResult\";\nimport { Container, Form } from \"react-bootstrap\"\nimport SpotifyWebApi from \"spotify-web-api-node\"\n//import axios from \"axios\"\n\nconst spotifyApi = new SpotifyWebApi({\n  clientId: \"8b945ef10ea24755b83ac50cede405a0\",\n})\n\nexport default function Dashboard({ code }) {\n  const accessToken = useAuth(code)\n  const [search, setSearch] = useState(\"\")\n  const [searchResults, setSearchResults] = useState([])\n  const [playingTrack, setPlayingTrack] = useState()\n  const [tracks, setTracks] = useState(\"\")\n\n  function chooseTrack(playlist) {\n    console.log(playlist);\n\n    //spotifyApi.getPlaylistTracks('6z1TiNDqlesNbUNgXoEPWK').then(res => {console.log(res);})\n\n    setPlayingTrack(playlist)\n    setSearch(\"\")\n    setTracks(\"\")\n  }\n\n   /*useEffect(() => {\n    if (!playingTrack) return\n\n   axios\n      .get(\"http://localhost:3001/lyrics\", {\n        params: {\n          track: playingTrack.title,\n          artist: playingTrack.artist,\n        },\n      })\n      .then(res => {\n        setLyrics(res.data.lyrics)\n      })\n  }, [playingTrack])*/\n\n/*useEffect(() => {\n  if (!accessToken) return\n  spotifyApi.setAccessToken(accessToken)\n}, [accessToken])\n useEffect(() => {\n  if (!search) return setSearchResults([]);\n  if (!accessToken) return;\n   let cancel = false;\n  spotifyApi.searchPlaylists(search + \" bpm\").then(res => {\n    \n    console.log(res.body[\"playlists\"].items);\n    //spotifyApi.getPlaylistTracks(search);\n   \n     if (cancel) return\n    setSearchResults(\n      res.body[\"playlists\"].items.map(playlist => {\n        const smallestAlbumImage = playlist.images.reduce(\n          (smallest, image) => {\n            if (image.height < smallest.height) return image\n            return smallest\n          },\n          playlist.images[0]\n        )\n         return {\n          //artist: track.artists[0].name,\n          title: playlist.name,\n          uri: playlist.uri,\n          albumUrl: smallestAlbumImage.url,\n        }\n      })\n    )\n  })\n   return () => (cancel = true)\n}, [search, accessToken])\n  return (\n   <Container className=\"d-flex flex-column py-2\" style={{ height: \"100vh\" }}>\n    <Form.Control\n      type=\"search\"\n      placeholder=\"Search Songs/Artists\"\n      value={search} \n      onChange={e => setSearch(e.target.value)}\n    />\n<div className=\"flex-grow-1 my-2\" style={{ overflowY: \"auto\" }}>\n      {searchResults.map(playlist => (\n        <PlaylistSearchResult\n          playlist={playlist}\n          key={playlist.uri}\n          chooseTrack={chooseTrack}\n        />\n      ))}\n      {searchResults.length === 0 && (\n        <div className=\"text-center\" style={{ whiteSpace: \"pre\" }}>\n          {tracks}\n        </div>\n        )}\n    </div>\n    <div>\n      <Player accessToken={accessToken} trackUri={playingTrack?.uri} />\n    </div>\n    </Container>\n )\n}*/","map":{"version":3,"sources":["/Users/powderlj/Desktop/Apprenticeship/capstone-final/client/src/components/Music/Dashboard.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["/*import { useState, useEffect } from \"react\"\nimport useAuth from \"./useAuth\"\nimport Player from \"./Player\"\n//import TrackSearchResult from \"./TrackSearchResult\"\nimport PlaylistSearchResult from \"./PlaylistSearchResult\";\nimport { Container, Form } from \"react-bootstrap\"\nimport SpotifyWebApi from \"spotify-web-api-node\"\n//import axios from \"axios\"\n\nconst spotifyApi = new SpotifyWebApi({\n  clientId: \"8b945ef10ea24755b83ac50cede405a0\",\n})\n\nexport default function Dashboard({ code }) {\n  const accessToken = useAuth(code)\n  const [search, setSearch] = useState(\"\")\n  const [searchResults, setSearchResults] = useState([])\n  const [playingTrack, setPlayingTrack] = useState()\n  const [tracks, setTracks] = useState(\"\")\n\n  function chooseTrack(playlist) {\n    console.log(playlist);\n\n    //spotifyApi.getPlaylistTracks('6z1TiNDqlesNbUNgXoEPWK').then(res => {console.log(res);})\n\n    setPlayingTrack(playlist)\n    setSearch(\"\")\n    setTracks(\"\")\n  }\n\n   /*useEffect(() => {\n    if (!playingTrack) return\n\n   axios\n      .get(\"http://localhost:3001/lyrics\", {\n        params: {\n          track: playingTrack.title,\n          artist: playingTrack.artist,\n        },\n      })\n      .then(res => {\n        setLyrics(res.data.lyrics)\n      })\n  }, [playingTrack])*/\n\n  /*useEffect(() => {\n    if (!accessToken) return\n    spotifyApi.setAccessToken(accessToken)\n  }, [accessToken])\n\n  useEffect(() => {\n    if (!search) return setSearchResults([]);\n    if (!accessToken) return;\n\n    let cancel = false;\n    spotifyApi.searchPlaylists(search + \" bpm\").then(res => {\n      \n      console.log(res.body[\"playlists\"].items);\n      //spotifyApi.getPlaylistTracks(search);\n     \n\n      if (cancel) return\n      setSearchResults(\n        res.body[\"playlists\"].items.map(playlist => {\n          const smallestAlbumImage = playlist.images.reduce(\n            (smallest, image) => {\n              if (image.height < smallest.height) return image\n              return smallest\n            },\n            playlist.images[0]\n          )\n\n          return {\n            //artist: track.artists[0].name,\n            title: playlist.name,\n            uri: playlist.uri,\n            albumUrl: smallestAlbumImage.url,\n          }\n        })\n      )\n    })\n\n    return () => (cancel = true)\n  }, [search, accessToken])\n\n\n  return (\n\n    <Container className=\"d-flex flex-column py-2\" style={{ height: \"100vh\" }}>\n      <Form.Control\n        type=\"search\"\n        placeholder=\"Search Songs/Artists\"\n        value={search} \n        onChange={e => setSearch(e.target.value)}\n      />\n\n<div className=\"flex-grow-1 my-2\" style={{ overflowY: \"auto\" }}>\n        {searchResults.map(playlist => (\n          <PlaylistSearchResult\n            playlist={playlist}\n            key={playlist.uri}\n            chooseTrack={chooseTrack}\n          />\n        ))}\n        {searchResults.length === 0 && (\n          <div className=\"text-center\" style={{ whiteSpace: \"pre\" }}>\n            {tracks}\n          </div>\n          )}\n      </div>\n      <div>\n        <Player accessToken={accessToken} trackUri={playingTrack?.uri} />\n      </div>\n      </Container>\n\n  )\n}*/\n"]},"metadata":{},"sourceType":"module"}